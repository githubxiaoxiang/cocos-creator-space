// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        maskTexture:    { value: white }
        detailTexture:    { value: white }
        cubeTexture:    { value: white }
        strenghten: { value: 0.05, target: parameters.x }
        cells: { value: [1.0,1.0], target: parameters.yz }
        fps: { value: 1.0, target: parameters.w }
        reflectionStrengthen: { value: 0.5, target: cubeParams.x }
        reflectionDistortion: {value: 0.2, target: cubeParams.y }

        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;
  uniform sampler2D maskTexture;
  uniform sampler2D detailTexture;
  uniform samplerCube cubeTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 parameters;
    vec4 cubeParams;
  };

  vec4 frag () {
    float strenghten = parameters.x;
    vec2 cells = parameters.yz;
    float fps = parameters.w;

    float reflectionStrengthen = cubeParams.x;
    float reflectionDistortion = cubeParams.y;


    float index = floor(cc_time.x * fps);
    float row = cells.x;
    float col = cells.y;
    vec2 animUV = v_uv / cells.yx + vec2(mod(index,col)/col,floor(index/col)/row);

    vec4 detailColor = texture(detailTexture,animUV);

    float gray = detailColor.r * 0.299 + detailColor.g * 0.587 + detailColor.b * 0.114;

    vec3 offset = (detailColor.rgb - 0.5) * 2.0 * gray;

    vec4 color = mainColor * texture(mainTexture, v_uv + offset.xy * strenghten);
    color.rgb += detailColor.rgb;

    //reflect    R = V - 2 * N * dot(N,V)

    vec3 V = normalize(v_position - cc_cameraPos.xyz);
    vec3 N = normalize(v_normal - offset * reflectionDistortion);
    vec3 R = V - 2.0 * N * dot(N,V);
    vec4 cubeColor = texture(cubeTexture,R);

    vec4 mask = texture(maskTexture,v_uv);

    color.rgb = mix(color.rgb,cubeColor.rgb,reflectionStrengthen * mask.r);
    CC_APPLY_FOG(color, v_position);
    return CCFragOutput(color);
  }
}%
