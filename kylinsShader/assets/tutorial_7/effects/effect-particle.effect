CCEffect %{
  temporaries:
    b1: &b1
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one
        blendSrcAlpha: src_alpha
        blendDstAlpha: one
    b2: &b2
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendSrcAlpha: zero
        blendDstAlpha: one
    b3: &b3
      targets:
      - blend: true
        blendSrc: dst_color
        blendDst: one
        blendSrcAlpha: zero
        blendDstAlpha: dst_alpha
    d1: &d1 { depthTest: true, depthWrite: false }
    r1: &r1 { cullMode: none }
    p1: &p1
      mainTexture:            { value: grey }
      mainTiling_Offset:      { value: [1, 1, 0, 0]  }
      depthMap:               { value: white, editor: { parent: USE_GLOW } }
    p2: &p2
      <<: *p1
      tintColor:              { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }

  techniques:
  - name: add
    passes:
    - vert: particle-vs:lpvs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p2
  - name: alpha-blend
    passes:
    - vert: particle-vs:lpvs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b2
      properties: *p2
  - name: add-multiply
    passes:
    - vert: particle-vs:lpvs_main
      frag: tinted-fs:multiply
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b3
      properties: *p2
  - name: add-smooth
    passes:
    - vert: particle-vs:lpvs_main
      frag: no-tint-fs:addSmooth
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p1
  - name: premultiply-blend
    passes:
    - vert: particle-vs:lpvs_main
      frag: no-tint-fs:premultiplied
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b2
      properties: *p1
}%


CCProgram particle-vs %{
  precision highp float;
  #include <transform>
  #include <particle-common>
  #include <cc-local>

  in vec3 a_position; // center position
  in vec3 a_texCoord;  // xy:vertex index,z:frame index
  in vec3 a_texCoord1; // size
  in vec3 a_texCoord2; // rotation
  in vec4 a_color;

  #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
    in vec3 a_color1; // velocity.x, velocity.y, velocity.z, scale
  #endif

  #if CC_RENDER_MODE == RENDER_MODE_MESH
    in vec3 a_texCoord3;  // mesh vertices
    in vec3 a_normal;     // mesh normal
    in vec4 a_color1;     // mesh color
  #endif

  out vec4 v_screenPos;

  vec4 lpvs_main () {
    vec3 compScale = scale.xyz * a_texCoord1;
    vec4 pos = vec4(a_position, 1);
    #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
      vec4 velocity = vec4(a_color1.xyz, 0);
    #endif

    #if !CC_USE_WORLD_SPACE
      // simulate in world space. apply cc_matWorld matrix on CPU side.
      pos = cc_matWorld * pos;
      #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
        velocity = cc_matWorld * velocity;
      #endif
    #endif

    #define INDENTIFY_NEG_QUAT 10.0

    #if ROTATION_OVER_TIME_MODULE_ENABLE
      vec3 rotTmp = a_texCoord2;
      float mulFactor = 1.0;
      if (rotTmp.x > INDENTIFY_NEG_QUAT * 0.5) {
          rotTmp.x -= INDENTIFY_NEG_QUAT;
          mulFactor = -1.0;
      }
      vec4 rot = vec4(rotTmp, 0.0);
      rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);
    #else
      #if CC_RENDER_MODE != RENDER_MODE_MESH
        #if CC_RENDER_MODE == RENDER_MODE_BILLBOARD
          vec3 rotEuler = a_texCoord2;
        #elif CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
          vec3 rotEuler = vec3(0.);
        #else
          vec3 rotEuler = vec3(0., 0., a_texCoord2.z);
        #endif
        vec4 rot = quaternionFromEuler(rotEuler);
      #else
        vec4 rot = quaternionFromEuler(a_texCoord2);
      #endif
    #endif

    #if CC_RENDER_MODE != RENDER_MODE_MESH
      vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));

      #if CC_RENDER_MODE == RENDER_MODE_BILLBOARD || CC_RENDER_MODE == RENDER_MODE_VERTICAL_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);
      #elif CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);
      #elif RENDER_MODE_HORIZONTAL_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale);
      #endif

      color = a_color;
    #else
      mat3 rotMat = quatToMat3(rot);
      mat3 nodeMat = quatToMat3(nodeRotation);
      rotMat = nodeMat * rotMat;
      rot = mat3ToQuat(rotMat);

      mat4 xformNoScale = matrixFromRT(rot, pos.xyz);
      mat4 xform = matFromRTS(rot, pos.xyz, compScale);
      pos = xform * vec4(a_texCoord3, 1);
      vec4 normal = xformNoScale * vec4(a_normal, 0);
      color = a_color * a_color1;
    #endif
    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;

    pos = cc_matViewProj * pos;

    v_screenPos = pos;

    return pos;
  }
}%

// TODO: soft particle

CCProgram tinted-fs %{
  precision mediump float;
  #include <output>
  #include <float-crypto>

  in vec2 uv;
  in vec4 color;
  in highp vec4 v_screenPos;

  uniform sampler2D mainTexture;
  uniform FragConstants {
    vec4 tintColor;
  };

  #if USE_GLOW
    uniform sampler2D depthMap;
  #endif

  vec4 add () {
    #if USE_GLOW
      if(cc_fogAdd.w >= 0.9){
        vec3 screenUV = v_screenPos.xyz / v_screenPos.w * 0.5 + 0.5;
        float depth = RGBA2Float(texture(depthMap,screenUV.xy));
        if(screenUV.z > depth){
          discard;
        }
      }
    #endif
    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);
    return CCFragOutput(col);
  }

  vec4 multiply () {
    #if USE_GLOW
      if(cc_fogAdd.w >= 0.9){
        vec3 screenUV = v_screenPos.xyz / v_screenPos.w * 0.5 + 0.5;
        float depth = RGBA2Float(texture(depthMap,screenUV.xy));
        if(screenUV.z > depth){
          discard;
        }
      }
    #endif
    vec4 col;
    vec4 texColor = texture(mainTexture, uv);
    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);
    return CCFragOutput(col);
  }
}%

CCProgram no-tint-fs %{
  precision mediump float;
  #include <output>
  #include <float-crypto>

  in vec2 uv;
  in vec4 color;
  in highp vec4 v_screenPos;

  uniform sampler2D mainTexture;
  #if USE_GLOW
    uniform sampler2D depthMap;
  #endif

  vec4 addSmooth () {
    #if USE_GLOW
      if(cc_fogAdd.w >= 0.9){
        vec3 screenUV = v_screenPos.xyz / v_screenPos.w * 0.5 + 0.5;
        float depth = RGBA2Float(texture(depthMap,screenUV.xy));
        if(screenUV.z > depth){
          discard;
        }
      }
    #endif
    vec4 col = color * texture(mainTexture, uv);
    col.rgb *= col.a;
    return CCFragOutput(col);
  }

  vec4 premultiplied () {
    #if USE_GLOW
      if(cc_fogAdd.w >= 0.9){
        vec3 screenUV = v_screenPos.xyz / v_screenPos.w * 0.5 + 0.5;
        float depth = RGBA2Float(texture(depthMap,screenUV.xy));
        if(screenUV.z > depth){
          discard;
        }
      }
    #endif
    vec4 col = color * texture(mainTexture, uv) * color.a;
    return CCFragOutput(col);
  }
}%
