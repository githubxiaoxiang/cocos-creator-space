{
  "ver": "1.0.25",
  "uuid": "672e86e0-cbc1-4155-905d-8f120f1e84bc",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float PI = 3.141592653589793;\nconst float GRID_COUNT = 6.;\nconst float TOTAL_TIME = PI * 4.;\nconst float T1 = PI;\nconst float T2 = PI * 2.;\nconst float T3 = PI * 3.;\nconst float T4 = PI * 4.;\nconst vec3 C0 = vec3(1., 0.4667, 0.);\nconst vec3 C1 = vec3(1., 0.5882, 0.0784);\nconst vec3 C2 = vec3(0.9686, 0.6980, 0.2314);\nconst vec3 C3 = vec3(1., 0.8471, 0.3765);\nconst vec3 C4 = C0;\nvoid main() {\n  vec2 uv = v_uv0.xy;\n  uv.x = uv.x * 2.0 - 1.0;\n  uv.x *= 0.9;\n  vec3 col = C0;\n  float t = mod(cc_time.x * 2.5, TOTAL_TIME);\n  float mask = 1.0;\n  float h = 1.5;\n  float offsety = floor(uv.y * GRID_COUNT) / GRID_COUNT;\n  mask = 1.0 - step(-cos(clamp(t - offsety, 0., TOTAL_TIME)), uv.x);\n  col = mix(col, C1, mask);\n  t += h;\n  mask = step(-cos(clamp(t - offsety, T1, TOTAL_TIME)), uv.x) * step(T1, t);\n  col = mix(col, C2, mask);\n  t += h;\n  mask = (1.0 - step(-cos(clamp(t - offsety, T2, TOTAL_TIME)), uv.x)) * step(T2, t);\n  col = mix(col, C3, mask);\n  t += h;\n  mask = step(-cos(clamp(t - offsety, T3, TOTAL_TIME)), uv.x) * step(T3, t);\n  col = mix(col, C4, mask);\n  gl_FragColor = vec4(col, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform UARGS {\n  float xres;\n  float yres;\n};\nconst float PI = 3.141592653589793;\nconst float GRID_COUNT = 6.;\nconst float TOTAL_TIME = PI * 4.;\nconst float T1 = PI;\nconst float T2 = PI * 2.;\nconst float T3 = PI * 3.;\nconst float T4 = PI * 4.;\nconst vec3 C0 = vec3(1., 0.4667, 0.);\nconst vec3 C1 = vec3(1., 0.5882, 0.0784);\nconst vec3 C2 = vec3(0.9686, 0.6980, 0.2314);\nconst vec3 C3 = vec3(1., 0.8471, 0.3765);\nconst vec3 C4 = C0;\nvoid main() {\n  vec2 uv = v_uv0.xy;\n  uv.x = uv.x * 2.0 - 1.0;\n  uv.x *= 0.9;\n  vec3 col = C0;\n  float t = mod(cc_time.x * 2.5, TOTAL_TIME);\n  float mask = 1.0;\n  float h = 1.5;\n  float offsety = floor(uv.y * GRID_COUNT) / GRID_COUNT;\n  mask = 1.0 - step(-cos(clamp(t - offsety, 0., TOTAL_TIME)), uv.x);\n  col = mix(col, C1, mask);\n  t += h;\n  mask = step(-cos(clamp(t - offsety, T1, TOTAL_TIME)), uv.x) * step(T1, t);\n  col = mix(col, C2, mask);\n  t += h;\n  mask = (1.0 - step(-cos(clamp(t - offsety, T2, TOTAL_TIME)), uv.x)) * step(T2, t);\n  col = mix(col, C3, mask);\n  t += h;\n  mask = step(-cos(clamp(t - offsety, T3, TOTAL_TIME)), uv.x) * step(T3, t);\n  col = mix(col, C4, mask);\n  gl_FragColor = vec4(col, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}