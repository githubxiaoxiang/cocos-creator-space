// Copyright 2020 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2020-07-28 16:48:01
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2020-07-28 16:49:23
*/ 
 
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        xres: { value: 1.0 }
        yres: { value: 1.0 }
}%
 
 
CCProgram vs %{
  precision highp float;
 
  #include <cc-global>
  #include <cc-local>
 
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif
 
  void main () {
    vec4 pos = vec4(a_position, 1);
 
    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif
 
    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif
 
    v_color = a_color;
 
    gl_Position = pos;
  }
}%
 
 
CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
 
  in vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // 根据屏幕分辨率调整为方形，可选
  uniform UARGS {
    float xres;
    float yres;
  };


  // void main () {
  //   vec2 uv = v_uv0.xy;

  //   // uv变化前先采样
  //   // vec3 color = texture(texture, uv).rgb;

  //   // 居中后拉伸，中心区域uv范围变为[-0.5, 0.5]
  //   // uv -= 0.5;
  //   // uv.y *= yres / xres;
  //   float grids = fract(cc_time.x) * 100.;

  //   vec2 grid_uv = fract(uv * grids);
  //   vec2 grid_id = floor(uv * grids);

  //   vec3 color = texture(texture, grid_id / grids).rgb;
  //   // vec3 color = vec3(c); 
  //   gl_FragColor = vec4(color, 1.0);
  // }

  const float PI = 3.141592653589793;
  const float GRID_COUNT = 6.;
  const float TOTAL_TIME = PI * 4.;

  const float T1 = PI;
  const float T2 = PI * 2.;
  const float T3 = PI * 3.;
  const float T4 = PI * 4.;

  const vec3 C0 = vec3(1., 0.4667, 0.);
  const vec3 C1 = vec3(1., 0.5882, 0.0784);
  const vec3 C2 = vec3(0.9686, 0.6980, 0.2314);
  const vec3 C3 = vec3(1., 0.8471, 0.3765);
  const vec3 C4 = C0;

  void main() {
    vec2 uv = v_uv0.xy;
    uv.x = uv.x * 2.0 - 1.0;
    uv.x *= 0.9;
    
    vec3 col = C0;
    float t = mod(cc_time.x * 2.5, TOTAL_TIME);
    float mask = 1.0;
    float h = 1.5;
    
    float offsety = floor(uv.y * GRID_COUNT) / GRID_COUNT;
    mask = 1.0 - step(-cos(clamp(t - offsety, 0., TOTAL_TIME)), uv.x);
    col = mix(col, C1, mask);
    
    t += h;
    mask = step(-cos(clamp(t - offsety, T1, TOTAL_TIME)), uv.x) * step(T1, t);
    col = mix(col, C2, mask);
    
    t += h;
    mask = (1.0 - step(-cos(clamp(t - offsety, T2, TOTAL_TIME)), uv.x)) * step(T2, t);
    col = mix(col, C3, mask);
    
    t += h;
    mask = step(-cos(clamp(t - offsety, T3, TOTAL_TIME)), uv.x) * step(T3, t);
    col = mix(col, C4, mask);
    
    gl_FragColor = vec4(col, 1.0);
  }
}%
 
