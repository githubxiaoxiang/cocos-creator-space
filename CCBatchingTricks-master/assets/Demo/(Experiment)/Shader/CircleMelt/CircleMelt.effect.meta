{
  "ver": "1.0.25",
  "uuid": "06b15b26-3faf-4cd8-ba91-9b79b83cab84",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float xres;\nuniform float yres;\nfloat Circle(vec2 uv, vec2 origin, float r, float blur) {\n  float d = distance(uv, origin);\n  return smoothstep(r + blur, r - blur, d);\n}\nconst float grids = 25.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec3 color = texture2D(texture, uv).rgb;\n  uv -= 0.5;\n  uv.y *= yres / xres;\n  vec2 grid_uv = fract(uv * grids);\n  vec2 grid_id = floor(uv * grids);\n  float d = length(uv);\n  float r = 0.35 + sin(d + cc_time.x * 2.) * 0.8;\n  float mask = Circle(grid_uv, vec2(0.5, 0.5), r, 0.01);\n  color *= mask;\n  gl_FragColor = vec4(color, 1.0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform UARGS {\n  float xres;\n  float yres;\n};\nfloat Circle(vec2 uv, vec2 origin, float r, float blur) {\n  float d = distance(uv, origin);\n  return smoothstep(r + blur, r - blur, d);\n}\nconst float grids = 25.;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec3 color = texture(texture, uv).rgb;\n  uv -= 0.5;\n  uv.y *= yres / xres;\n  vec2 grid_uv = fract(uv * grids);\n  vec2 grid_id = floor(uv * grids);\n  float d = length(uv);\n  float r = 0.35 + sin(d + cc_time.x * 2.) * 0.8;\n  float mask = Circle(grid_uv, vec2(0.5, 0.5), r, 0.01);\n  color *= mask;\n  gl_FragColor = vec4(color, 1.0);\n}"
      }
    }
  ],
  "subMetas": {}
}