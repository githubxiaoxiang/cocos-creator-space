// Copyright 2020 Cao Gaoting<caogtaa@gmail.com>
// https://caogtaa.github.io
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT

/*
 * Date: 2021-05-02 00:40:17
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-05-02 01:00:40
*/ 
 
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%
 
CCProgram vs %{
  precision highp float;
 
  #include <cc-global>
  #include <cc-local>
 
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
 
  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;
 
    v_color = a_color;
    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;
 
  #include <cc-global>
  #include <cc-local>
 
  #define PI 3.141592653589793
  
  in vec4 v_color;
  in vec2 v_uv0;
 
  uniform sampler2D texture;
  uniform UARGS {
    float dx;
    float dy;
  };

  void main()
  {
    vec2 uv = v_uv0.xy;
    vec4 sum = vec4(0.);

    // sum += texture(texture, uv+vec2(-dx, -dy));
    // sum += texture(texture, uv+vec2(-dx, 0.));
    // sum += texture(texture, uv+vec2(-dx, dy));
    // sum += texture(texture, uv+vec2(0., -dy));
    // sum += texture(texture, uv+vec2(0., dy));
    // sum += texture(texture, uv+vec2(dx, -dy));
    // sum += texture(texture, uv+vec2(dx, 0.));
    // sum += texture(texture, uv+vec2(dx, dy));

    // 等价于上面注释部分代码
    vec4 d = vec4(dx, dy, -dy, 0.);
    sum += texture(texture, uv-d.xy);   // 即uv + (-dx, -dy)处采样
    sum += texture(texture, uv-d.xw);   // 即uv + (-dx, 0.)处采样
    sum += texture(texture, uv-d.xz);   // 即uv + (-dx, +dy)处采样
    sum += texture(texture, uv+d.wz);   // ...以此类推
    sum += texture(texture, uv+d.wy);
    sum += texture(texture, uv+d.xz);
    sum += texture(texture, uv+d.xw);
    sum += texture(texture, uv+d.xy);

    vec4 col = texture(texture, uv);
    vec4 le3 = step(sum, vec4(3.1));
    vec4 oneCase = step(vec4(1.9), sum) * le3; // 1.9 < sum < 3.1, means sum is 2 or 3
    vec4 zeroCase = step(vec4(2.9), sum) * le3; // 2.9 < sum < 3.1, means sum is 3

    col = mix(zeroCase, oneCase, col);
    gl_FragColor = vec4(col.rgb, 1.0);
  }
}%
 
