/*
 * Author: GT<caogtaa@gmail.com>
 * Date: 2021-03-29 17:04:32
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-04-11 14:38:07
*/

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        yRatio: { value: 1.0, inspector: { displayName: 'y/x' } }
        sdfRatio: { value: 1.0, inspector: { displayName: 'SDF区间/x' } }
        outlineHalfWidth: { value: 0.05, inspector: { displayName: '二分之一轮廓宽度/SDF区间' } }
        time: { value: 0.0, inspector: { displayName: '时间(秒)' } }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

// by caogtaa
// 赛亚人能量
CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.141592653589793
  
  in vec4 v_color;
  in vec2 v_uv0;
  in vec2 v_uv1;

  uniform sampler2D texture;
  uniform ARGS {
    float yRatio;
    float sdfRatio;
    float outlineHalfWidth;
    float time;
  };

  
  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d-c) + c;
  }

  float Circle(vec2 uv, vec2 o, float r, float blur) {
    return smoothstep(r, r-blur, distance(uv, o));
  }

  // 根据到o的距离生成sdf，越接近o则返回值越大，并且在距离是r处刚好是0.5
  float CircleSDF(vec2 uv, vec2 o, float r) {
    float s = Remap(r+sdfRatio*0.5, r-sdfRatio*0.5, 0., 1., distance(uv, o));
    return clamp(s, 0., 1.);
  }

  void main()
  {
    vec2 uv = v_uv0.xy;
    vec4 col = texture(texture, uv) * v_color;

    // o是以图片中心为原点的uv坐标，范围[-0.5, 0.5]
    vec2 o = uv * 2.0 - 1.0;
    o.y *= yRatio;

    float alpha = col.a;
    
    // 轮廓宽度(0.0, 1.0)
    // float outlineWidth = 0.05;

    // 选择一个alpha值做为轮廓的中线
    float centerAlpha = 0.5;

    // 圆的outline
    float mask1 = CircleSDF(o, vec2(0., 0.), 0.4);


    float t = cc_time.x;
    alpha = mix(mask1, alpha, smoothstep(0.35, 0.65, sin(t * 2.0) * 0.5 + 0.5));

    float outlineAlphaDist = outlineHalfWidth;
    float mask = smoothstep(outlineAlphaDist, outlineAlphaDist - 0.02, abs(alpha - centerAlpha));
    float ring = mask;

    vec4 outlineColor = vec4(0., 1., 0., ring);
    col = outlineColor;
    gl_FragColor = col;
  }
}%
