/*
 * Author: GT<caogtaa@gmail.com>
 * Date: 2021-03-29 17:04:32
 * LastEditors: GT<caogtaa@gmail.com>
 * LastEditTime: 2021-04-08 20:12:34
*/

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        outlineColor: { value: [1., 0., 1., 1.], inspector: { displayName: '颜色' } }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;
  
  void main() {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    v_uv0 = a_uv0;

    v_color = a_color;
    gl_Position = pos;
  }
}%

// by caogtaa
// 霓虹灯边框
CCProgram fs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  #define PI 3.141592653589793
  
  in vec4 v_color;
  in vec2 v_uv0;
  in vec2 v_uv1;

  uniform sampler2D texture;
  uniform ARGS {
    vec4 outlineColor;
  };

  
  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d-c) + c;
  }

  float Circle(vec2 uv, vec2 o, float r, float blur) {
    return smoothstep(r, r-blur, distance(uv, o));
  }

  // 根据到o的距离生成sdf，越接近o则返回值越大，并且在距离是r处刚好是0.5
  float CircleSDF(vec2 uv, vec2 o, float r) {
    return clamp(1.0 - distance(uv, o) + r - 0.5, 0., 1.);
  }

  // 脉冲函数
  // X,Y区间都是[0,1]，X=0.5位置Y=1
  // https://www.iquilezles.org/www/articles/functions/functions.htm
  float Pulse(float x) {
    return pow(4.0 * x * (1.0 - x), 16.0);
  }

  void main()
  {
    vec2 uv = v_uv0.xy;
    vec4 col = texture(texture, uv) * v_color;
    float alpha = col.a;
    
    // 轮廓宽度(0.0, 1.0), 对应alpha区域
    float outlineWidth = 0.4;

    // 选择一个alpha值做为轮廓的中线
    float centerAlpha = 0.5;

    float alphaDist = abs(alpha - centerAlpha);
    float mask = smoothstep(outlineWidth, 0., alphaDist);
    col = vec4(outlineColor.rgb, mask);
    
    // 底色基础上叠加一个亮度，叠加后中心位置变白
    // 对亮度做一个动画
    float brightness = Remap(0., 1., 0.7, 1.0, abs(sin(cc_time.x * 2.0)));
    col.rgb += Pulse((alphaDist + 0.5)) * brightness;

    gl_FragColor = col;
  }
}%
