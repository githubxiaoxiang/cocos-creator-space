{
  "ver": "1.0.25",
  "uuid": "b5cbf6d2-83e8-47fa-bf48-64310c322f9d",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nattribute vec2 a_p;\nattribute vec2 a_q;\nvarying vec2 v_uv0;\nvarying vec2 v_p;\nvarying vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec2 v_uv0;\nvarying vec2 v_p;\nvarying vec2 v_q;\nuniform sampler2D texture;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture2D(texture, uv);\n  uv = uv * v_p + v_q;\n  float d = distance(uv, vec2(0.5, 0.5));\n  float r = 0.5 - abs(sin(cc_time.x * 2.) * 0.02);\n  float mask = smoothstep(r + 0.01, r - 0.01, d);\n  col.a = mask;\n  gl_FragColor = col;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nin vec2 a_p;\nin vec2 a_q;\nout vec2 v_uv0;\nout vec2 v_p;\nout vec2 v_q;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_p = a_p;\n  v_q = a_q;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec2 v_uv0;\nin vec2 v_p;\nin vec2 v_q;\nuniform sampler2D texture;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec4 col = texture(texture, uv);\n  uv = uv * v_p + v_q;\n  float d = distance(uv, vec2(0.5, 0.5));\n  float r = 0.5 - abs(sin(cc_time.x * 2.) * 0.02);\n  float mask = smoothstep(r + 0.01, r - 0.01, d);\n  col.a = mask;\n  gl_FragColor = col;\n}"
      }
    }
  ],
  "subMetas": {}
}